@model IEnumerable<TechnicoRMP.WebApp.Models.PropertyRepairViewModel>

<div>
    <!-- Filter Form -->
    <form method="get" action="/Repairs" class="form-inline mb-3">

        <label for="startDate" class="mr-2">Start Date:</label>
        <input type="date" id="startDate" name="startDate" class="form-control mr-3"
               value="@ViewData["StartDate"]" />

        <label for="endDate" class="mr-2">End Date:</label>
        <input type="date" id="endDate" name="endDate" class="form-control mr-3"
               value="@ViewData["EndDate"]" />

        <!-- Buttons with top margin to add spacing -->
        <button type="submit" class="btn btn-primary mt-3 mr-3">Filter</button>
        <a href="/Repairs" class="btn btn-secondary mt-3 ml-3">Reset</a>
       
    </form>
    <a asp-controller="Admin" asp-action="CreateRepair" class="btn btn-success mt-3 mr-3">Create</a>

    <!-- Scrollable Table -->
    <div style="overflow-x: auto; max-height: 400px; border: 1px solid #ccc; padding: 10px;">
        <table class="table table-striped table-bordered" style="min-width: 800px;">
            <thead>
                <tr>
                    <th style="width: 50px;">ID</th>
                    <th style="width: 150px;">Date</th>
                    <th style="width: 200px;">Type of Repair</th>
                    <th style="width: 200px;">Address</th>
                    <th style="width: 150px;">Repair Status</th>
                    <th style="width: 100px;">Cost</th>
                    <th style="width: 100px;">User ID</th>
                    <th style="width: 100px;">Is Active</th>
                    <th style="width: 150px;">Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model)
                {
                    <tr id="row-@item.Id">
                        <td>@item.Id</td>
                        <td>@item.Date.ToString("yyyy-MM-dd")</td>
                        <td>@item.TypeOfRepair</td>
                        <td>@item.Address</td>
                        <td>@item.RepairStatus</td>
                        <td>@item.Cost.ToString("C")</td>
                        <td>@item.UserId</td>
                        <td>@(item.IsActive ? "Yes" : "No")</td>
                        <td>
                            <a href="@Url.Action("Edit", "PropertyRepairs", new { id = item.Id })" class="btn btn-warning btn-sm mr-2">Update</a>
                            <!-- Delete Button with JavaScript Action -->
                            <button type="button" class="btn btn-danger btn-sm" onclick="deleteItem(@item.Id)">Delete</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

<!-- JavaScript Section -->
<script>
   
    async function deleteItem(id) {
        if (confirm("Are you sure you want to delete this item?")) {
            try {
                // Call API to delete the item
                const response = await fetch(`/DeleteRepair/${id}`, {
                    method: "DELETE",
                    headers: {
                        "Content-Type": "application/json"
                    }
                });

                console.log(response);

                if (response.ok) {
                    // Remove the row from the table if the deletion is successful
                    document.getElementById(`row-${id}`).remove();
                    alert("Item deleted successfully.");
                } else {
                    // Handle errors
                    const errorText = await response.text();
                    alert(`Failed to delete the item: ${errorText}`);
                }
            } catch (error) {
                console.error("Error deleting item:", error);
                alert("An unexpected error occurred while trying to delete the item.");
            }
        }
    }
</script>
